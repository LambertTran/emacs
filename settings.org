* Performance
#+BEGIN_SRC emacs-lisp
  (setq native-comp-speed 3) ;; maximum native Elisp speed!
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)

  (use-package evil
    :ensure t
    :config
    ;; Make tab work with org-mode
    (evil-mode 1)
    )
#+END_SRC

* Org
** Change bullet style
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+END_SRC

** Column to middle of page
#+BEGIN_SRC emacs-lisp
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . org-mode-visual-fill))
#+END_SRC

** Utilities
#+BEGIN_SRC emacs-lisp
;; insert src org
(global-set-key (kbd "C-c a") 'org-agenda-list)
(global-set-key (kbd "C-c s") 'org-insert-structure-template)
(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
(set-face-foreground 'org-block-begin-line "#4e4e4e")
(set-face-background 'org-block-begin-line "#3a3a3a")

;; extend block code
(custom-set-faces
 '(org-block ((t (:extend t)))))

;; set block code indentation
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0
      org-startup-truncated nil
      org-src-tab-acts-natively t
      org-startup-indented t)

;; disable image size
(setq org-image-actual-width nil)
#+END_SRC

* Git
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
         ;; open magit status in same buffer
         (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  :config
         (global-set-key (kbd "C-x g") 'magit-status)
  )


;; open file in git
(use-package git-link
  :ensure t
  :config
         (setq git-link-open-in-browser t)
  )

(global-set-key (kbd "C-c l") 'git-link)
#+end_src

* Keybinding
#+BEGIN_SRC emacs-lisp
;; ECS cancels all
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;;
(global-set-key (kbd "C-x k") 'kill-this-buffer)

(defun ls ()
  "Lists the contents of the current directory."
  (interactive)
  (shell-command "open -a iterm ."))

(global-set-key (kbd "C-x t") 'ls);

;; MacOS option key as meta
(setq mac-option-modifier 'meta)

;; find definity
(global-set-key (kbd "M-g j") 'xref-find-definitions)
;; go back
(global-set-key (kbd "M-g b") 'xref-pop-marker-stack)
#+END_SRC

* Search Completion
** Ivy mode
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :bind (("C-s" . swiper-isearch)
	     ("C-a" . swiper-all-thing-at-point)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src

** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
  )

;; Adds M-x recent command sorting for counsel-M-x
(use-package smex
  :ensure t
  :defer 1
  :after counsel)
#+end_src


* Folder management
#+begin_src  emacs-lisp
(use-package projectile
  :ensure t
  :config
     ;; enable
     (projectile-mode +1)

     ;; ignore  node_modules dir - JS
     ;;(setq projectile-globally-ignored-files '( "TAGS" "*/*node_modules"))

     ;;(setq projectile-globally-ignored-directories "eln-cache")

     ;; remap key
     (define-key projectile-mode-map (kbd "C-q p") 'projectile-command-map)
     (setq projectile-use-git-grep t)
  )

;; make sure projectile to work with counsel
(use-package counsel-projectile
  :ensure t
  )

(defun projectile-discover-projects-in-directory (directory)
  "Discover any projects in DIRECTORY and add them to the projectile cache.
This function is not recursive and only adds projects with roots
at the top level of DIRECTORY."
  (interactive
   (list (read-directory-name "Starting directory: ")))
  (let ((subdirs (directory-files directory t)))
    (mapcar
     (lambda (dir)
       (when (and (file-directory-p dir)
                  (not (member (file-name-nondirectory dir) '(".." "."))))
         (let ((default-directory dir)
               (projectile-cached-project-root dir))
           (when (projectile-project-p)
             (projectile-add-known-project (projectile-project-root))))))
     subdirs)))
#+end_src

* UI
** Theme
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (tooltip-mode -1)
  ;;(global-display-line-numbers-mode 1)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (column-number-mode t)
  (global-auto-revert-mode t)
  (toggle-scroll-bar -1)
  (global-visual-line-mode 1)
  (electric-pair-mode 1)
  (setq electric-pair-preserve-balance nil)
  (setq ring-bell-function 'ignore)
  ;; disable tabbing
  (setq-default indent-tabs-mode nil)

  ;; set warning to Error
  (setq warning-minimum-level :emergency)

  (set-frame-font "Monaco 17" nil t)

  ;; use with doom-mode-line
  ;; https://github.com/doomemacs/themes
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (custom-set-faces
   `(font-lock-keyword-face ((t (:foreground ,(doom-color 'green '257)))))
   `(font-lock-variable-name-face ((t (:foreground ,(doom-color 'blue '1000)))))
   )


#+END_SRC

** Mode line
#+begin_src  emacs-lisp
  ;; https://github.com/seagle0128/doom-modeline#install
  ;; use with nerd-icons
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  ;; https://github.com/rainstormstudio/nerd-icons.el#installing-fonts
  (use-package nerd-icons
    :ensure t)
#+end_src

** Manual step
#+begin_src bash
  Run M-x nerd-icons-install-fonts
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode)
    )
#+end_src

* Utilities
** Force emacs to use PATH
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

#+end_src

** Super auto save
#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (super-save-mode +1))
#+end_src

** Trim white space
#+begin_src emacs-lisp
  (use-package ws-butler
    :ensure t
    :config
    (ws-butler-global-mode)
    )
#+end_src

** Backup
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq auto-save-file-name-transforms `((".*" ,"~/.saves" t)))
#+end_src

* Completion
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :hook
  (prog-mode . yas-minor-mode)
  )
(use-package corfu
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :init
  :ensure t
  :config
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  :ensure t
  :config
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
;; Enable auto completion and configure quitting
(setq corfu-auto t
      corfu-quit-no-match 'separator) ;; or t
#+END_SRC

* Eglot
#+begin_src emacs-lisp
(use-package eglot
  :ensure t
  :defer t)
#+end_src
* Treesitter
** Manual step
Note: Eval this block of code to install all treesitter grammar language
#+BEGIN_SRC
  ;; https://www.masteringemacs.org/article/how-to-get-started-tree-sitter

  (setq treesit-language-source-alist
	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
	  (css "https://github.com/tree-sitter/tree-sitter-css")
	  (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	  (go "https://github.com/tree-sitter/tree-sitter-go")
      (gomode "https://github.com/camdencheek/tree-sitter-go-mod")
	  (html "https://github.com/tree-sitter/tree-sitter-html")
	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	  (json "https://github.com/tree-sitter/tree-sitter-json")
	  (make "https://github.com/alemuller/tree-sitter-make")
	  (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	  (python "https://github.com/tree-sitter/tree-sitter-python")
	  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
      (hcl "https://github.com/MichaHoffmann/tree-sitter-hcl")
      (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
      (jsonnet "https://github.com/sourcegraph/tree-sitter-jsonnet")
      (comment "https://github.com/stsewd/tree-sitter-comment")
      (make "https://github.com/alemuller/tree-sitter-make")
      (sql "https://github.com/DerekStride/tree-sitter-sql")
      (org "https://github.com/milisims/tree-sitter-org")
	  (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

#+END_SRC

** Golang
#+BEGIN_SRC emacs-lisp
(use-package go-ts-mode
  :ensure t
  :mode "\\.go\\'"
  :hook ((go-ts-mode . eglot-ensure)
         (go-ts-mode . corfu-mode)))

#+END_SRC

** Golang-mode
#+BEGIN_SRC emacs-lisp
(use-package go-mod-ts-mode
  :ensure t
  :mode "\\.mod\\'"
  :hook ((go-mod-ts-mode . eglot-ensure)
         (go-mod-ts-mode . corfu-mode)))

#+END_SRC

** Bash
#+BEGIN_SRC emacs-lisp
(use-package bash-ts-mode
  :ensure t
  :mode "\\.sh\\'"
  :hook ((bash-ts-mode . eglot-ensure)
         (bash-ts-mode . corfu-mode)))
#+END_SRC

** Dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-ts-mode
  :ensure t
  :mode "\\Dockerfile\\'"
  :hook ((dockerfile-ts-mode . eglot-ensure)
         (dockerfile-ts-mode . corfu-mode)))
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-ts-mode
  :ensure t
  :mode ("\\.yaml\\'" "\\.yml\\'")
  :hook ((yaml-ts-mode . eglot-ensure)
         (yaml-ts-mode . corfu-mode)))
#+END_SRC

** Javascript
#+begin_src emacs-lisp
(use-package js-ts-mode
  :ensure t
  :mode "\\.js\\'"
  :hook((js-ts-mode . eglot-ensure)
        (js-ts-mode . corfu-mode))
  )
#+end_src

** Typescript
#+begin_src emacs-lisp
(use-package typescript-ts-mode
  :ensure t
  :mode "\\.ts\\'"
  :hook((typescript-ts-mode . eglot-ensure)
        (typescript-ts-mode . corfu-mode))
  )
#+end_src

** Python
#+begin_src emacs-lisp
(use-package python-ts-mode
  :ensure t
  :mode "\\.py\\'"
  :hook((python-ts-mode . eglot-ensure)
        (python-ts-mode . corfu-mode))
  )
#+end_src

** Terraform
#+begin_src emacs-lisp
(use-package terraform-ts-mode
  :ensure t
  :mode "\\.tf\\'"
  :hook((terraform-ts-mode . eglot-ensure)
        (terraform-ts-mode . corfu-mode))
  )
#+end_src

** Remap major autoloaded mode
#+begin_src emacs-lisp
(setq major-mode-remap-alist
 '((yaml-mode . yaml-ts-mode)
   (bash-mode . bash-ts-mode)
   (js2-mode . js-ts-mode)
   (typescript-mode . typescript-ts-mode)
   (json-mode . json-ts-mode)
   (css-mode . css-ts-mode)
   (python-mode . python-ts-mode)))
#+end_src



* Programming
** Terraform
#+begin_src emacs-lisp
;;; terraform-ts-mode.el --- Terraform major mode using Treesitter and eglot  -*- lexical-binding: t -*-

;;; Copyright (C) 2022-2027 Kai Grotelüschen

;; Author:     Kai Grotelueschen <kgr@gnotes.de>
;; Maintainer: Kai Grotelueschen <kgr@gnotes.de>
;; Version:    0.4
;; Keywords:   elisp, extensions
;; Homepage:   https://github.com/kgrotel/terraform-ts-mode
;; Package-Requires: ((emacs "29.1"))

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see http://www.gnu.org/licenses.


;;; Commentary:

;; This is a terraform mode using treesit. There are still quite some
;; Isues with using Treesitter for imenu and Highlight so any kind of
;; help is greatly appreaciated

;;; Code:

(require 'treesit)
(require 'eglot)
(eval-when-compile (require 'rx))

(declare-function treesit-parser-create "treesit.c")
(declare-function treesit-query-capture "treesit.c")
(declare-function treesit-induce-sparse-tree "treesit.c")
(declare-function treesit-node-child "treesit.c")
(declare-function treesit-node-start "treesit.c")
(declare-function treesit-node-type "treesit.c")

(defgroup terraform nil
  "Support terraform code."
  :link '(url-link "https://www.terraform.io/")
  :group 'languages)

;; module customizions

(defcustom terraform-ts-mode-hook nil
  "Hook called by `terraform-ts-mode'."
  :type 'hook
  :group 'terraform)

(defcustom terraform-ts-indent-level 2
  "The tab width to use when indenting."
  :type 'integer
  :group 'terraform)

(defcustom terraform-ts-format-on-save t
  "Format buffer on save using eglot-format"
  :type 'boolean
  :group 'terraform)

(defcustom terraform-ts-eglot-debug nil
  "diasable debugging of eglot (mostly eglot logging) to improve performance"
  :type 'boolean
  :group 'terraform)

;; module facses

(defface terraform-resource-type-face
  '((t :inherit font-lock-type-face))
  "Face for resource names."
  :group 'terraform-mode)

(defface terraform-resource-name-face
  '((t :inherit font-lock-function-name-face))
  "Face for resource names."
  :group 'terraform-mode)

(defface terraform-builtin-face
  '((t :inherit font-lock-builtin-face))
  "Face for builtins."
  :group 'terraform-mode)

(defface terraform-variable-name-face
  '((t :inherit font-lock-variable-name-face))
  "Face for varriables."
  :group 'terraform-mode)

;; mode vars

(defvar terraform-ts--syntax-table
  (let ((table (make-syntax-table)))
    (modify-syntax-entry ?_ "_" table)
    (modify-syntax-entry ?- "_" table)
    (modify-syntax-entry ?= "." table)
    (modify-syntax-entry ?# "< b" table)
    (modify-syntax-entry ?\n "> b" table)
    (modify-syntax-entry ?/  ". 124b" table)
    (modify-syntax-entry ?*  ". 23" table)
    table)
  "Syntax table for `terraform-ts-mode'.")

;; Imenu

;; MODE VARS
(defvar terraform-ts--builtin-attributes
  '("for_each" "count" "source" "type" "default" "providers" "provider")
  "Terraform builtin attributes for tree-sitter font-locking.")

(defvar terraform-ts--builtin-expressions
  '("local" "each" "count")
  "Terraform builtin expressions for tree-sitter font-locking.")

(defvar terraform-ts--named-expressions
  '("var" "module")
  "Terraform named expressions for tree-sitter font-locking.")

(defvar terraform-ts--treesit-font-lock-rules
  (treesit-font-lock-rules
   :language 'terraform
   :feature 'comments
   '((comment) @font-lock-comment-face) ;; checkOK

   :language 'terraform
   :feature 'brackets
   '(["(" ")" "[" "]" "{" "}"] @font-lock-bracket-face) ;; checkOK

   :language 'terraform
   :feature 'delimiters
   '(["." ".*" "," "[*]" "=>"] @font-lock-delimiter-face) ;; checkOK

   :language 'terraform
   :feature 'operators
   '(["!"] @font-lock-negation-char-face)

   :language 'terraform
   :feature 'operators
   '(["\*" "/" "%" "\+" "-" ">" ">=" "<" "<=" "==" "!=" "&&" "||"] @font-lock-operator-face)

   :language 'terraform
   :feature 'builtin
   '((function_call (identifier) @font-lock-builtin-face)) ;; checkOK

   :language 'terraform
   :feature 'objects
   '((object_elem key: (expression (variable_expr (identifier) @font-lock-property-name-face))))

   :language 'terraform
   :feature 'expressions
   `(
     ((expression (variable_expr (identifier) @terraform-builtin-face)
		  (get_attr (identifier) @font-lock-property-name-face))
      (:match ,(rx-to-string `(seq bol (or ,@terraform-ts--builtin-expressions) eol)) @terraform-builtin-face)) ; local, each and count

     ((expression (variable_expr (identifier) @terraform-builtin-face)
		  :anchor (get_attr (identifier) @font-lock-function-call-face)
		  (get_attr (identifier) @font-lock-property-name-face) :* )
      (:match ,(rx-to-string `(seq bol (or ,@terraform-ts--named-expressions) eol)) @terraform-builtin-face)) ; module and var

     ((expression (variable_expr (identifier) @terraform-builtin-face)
		  :anchor (get_attr (identifier) @terraform-resource-type-face)
		  (get_attr (identifier) @terraform-resource-name-face)
		  (get_attr (identifier) @font-lock-property-name-face) :* )
      (:match "data"  @terraform-builtin-face))

     ((expression (variable_expr (identifier) @terraform-resource-type-face)
		  :anchor (get_attr (identifier) @terraform-resource-name-face)
		  (get_attr (identifier) @font-lock-property-name-face) :* ))  ; that should be a resource
    )

   :language 'terraform
   :feature 'interpolation
   '((interpolation "#{" @font-lock-misc-punctuation-face)
     (interpolation "}" @font-lock-misc-punctuation-face))


   :language 'terraform
   :feature 'blocks
   `(
     ((attribute (identifier) @terraform-builtin-face) (:match ,(rx-to-string `(seq bol (or ,@terraform-ts--builtin-attributes) eol)) @terraform-builtin-face))
     ((attribute (identifier) @terraform-variable-name-face))
     )

   :language 'terraform
   :feature 'blocks
   '(
     ((block (identifier) @terraform-builtin-face (string_lit (template_literal) @font-lock-type-face) (string_lit (template_literal) @font-lock-function-name-face)))
    )

   :language 'terraform
   :feature 'blocks
   '(
     ((block (identifier) @terraform-builtin-face (string_lit (template_literal) @font-lock-function-name-face) :?))
    )

   :language 'terraform
   :feature 'conditionals
   '(["if" "else" "endif"] @font-lock-keyword-face)

   :language 'terraform
   :feature 'constants
   '((bool_lit) @font-lock-constant-face) ;; checkOK

   :language 'terraform
   :feature 'numbers
   '((numeric_lit) @font-lock-number-face) ;; checkOK

   :language 'terraform
   :feature 'strings
   '((string_lit (template_literal))  @font-lock-string-face)
  )
  "Tree-sitter font-lock settings.")

(defvar terraform-ts--indent-rules
  `((terraform
     ((node-is "block_end") parent-bol 0)
     ((node-is "object_end") parent-bol 0)
     ((node-is ")") parent-bol 0)
     ((node-is "tuple_end") parent-bol 0)
     ((parent-is "function_call") parent-bol ,terraform-ts-indent-level)
     ((parent-is "object") parent-bol ,terraform-ts-indent-level)
     ((parent-is "tuple") parent-bol ,terraform-ts-indent-level)
     ((parent-is "block") parent-bol ,terraform-ts-indent-level))))

;; Major Mode def
(define-derived-mode terraform-ts-mode prog-mode "Terraform"
  "Terraform Tresitter Mode"
  :group 'terraform
  :syntax-table terraform-ts--syntax-table

  ;; treesit - add terraform grammar
  (add-to-list 'treesit-language-source-alist
      '(terraform . ("https://github.com/MichaHoffmann/tree-sitter-hcl"  "main"  "dialects/terraform/src")))

  ;; treesit - check grammar is readdy if not most likly in need to be installed
  (unless (treesit-ready-p 'terraform)
    (treesit-install-language-grammar 'terraform))

  ;; treesit - init parser
  (treesit-parser-create 'terraform)

  ;; eglot - integrate mode into terraform-ts-mode
  (add-hook 'terraform-ts-mode-hook 'eglot-ensure)
  (with-eval-after-load 'eglot
    (put 'terraform-ts-mode 'eglot-language-id "terraform")
    (add-to-list 'eglot-server-programs
		 '(terraform-ts-mode . ("terraform-ls" "serve"))))

  ;; eglot - use format on save
  (if terraform-ts-format-on-save
    (add-hook 'before-save-hook 'eglot-format)
    (remove-hook 'before-save-hook 'eglot-format))

  ;; eglot - disable debugging eglot - increase performance
  (unless terraform-ts-eglot-debug
    (fset #'jsonrpc--log-event #'ignore) ; disable eglot event logging
    (setq eglot-events-buffer-size 0)    ; decrease event logging buffer (not needed see above)
    (setq eglot-sync-connect nil)        ; disabling  waiting for eglot sync done / might mean that eglot is not avail at opening file
  )

  (setq-local comment-start "#")
  (setq-local comment-use-syntax t)
  (setq-local comment-start-skip "\\(//+\\|/\\*+\\)\\s *")

  ;; Electric
  (setq-local electric-indent-chars (append "{}[]()" electric-indent-chars))

  ;; Indent.
  (setq-local treesit-simple-indent-rules terraform-ts--indent-rules)

  ;; Navigation.
  ;; (setq-local treesit-defun-type-regexp (rx (or "pair" "object")))
  ;; (setq-local treesit-defun-name-function #'json-ts-mode--defun-name)
  ;; (setq-local treesit-sentence-type-regexp "pair")

  ;; Font-lock
  (setq-local treesit-font-lock-feature-list '((comments)
					       (keywords attributes blocks strings numbers constants objects output modules workspaces vars)
					       (builtin brackets delimiters expressions operators interpolations conditionals)
					       ()))
  (setq-local treesit-font-lock-settings terraform-ts--treesit-font-lock-rules)

  ;; Imenu ... todo
  ;; (setq-local treesit-simple-imenu-settings
  ;;	       `((nil "block" nil nil)))

  (treesit-major-mode-setup))

;;; autoload
(add-to-list 'auto-mode-alist '("\\.tf\\(vars\\)?\\'" . terraform-ts-mode))

(provide 'terraform-ts-mode)
;;; terraform-ts-mode.el ends here
#+end_src

** Golang
#+begin_src emacs-lisp
;; Optional: install eglot-format-buffer as a save hook.
;; The depth of -10 places this before eglot's willSave notification,
;; so that that notification reports the actual contents that will be saved.
(defun eglot-format-buffer-on-save ()
  (add-hook 'before-save-hook #'eglot-format-buffer -10 t))
(add-hook 'go-ts-mode-hook #'eglot-format-buffer-on-save)

;; Gopls setting https://github.com/golang/tools/blob/master/gopls/doc/settings.md
(setq-default eglot-workspace-configuration
    '((:gopls .
        ((usePlaceholders . t)
         (matcher . "CaseInsensitive")))))
#+end_src
