* Performance
#+BEGIN_SRC emacs-lisp
  (setq native-comp-speed 3) ;; maximum native Elisp speed!
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)

  (use-package evil
    :ensure t
    :config
    ;; Make tab work with org-mode
    (evil-mode 1)
    )
#+END_SRC

* Org
** Change bullet style
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+END_SRC

** Column to middle of page
#+BEGIN_SRC emacs-lisp
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . org-mode-visual-fill))
#+END_SRC

** Utilities
#+BEGIN_SRC emacs-lisp
;; insert src org
(global-set-key (kbd "C-c a") 'org-agenda-list)
(global-set-key (kbd "C-c s") 'org-insert-structure-template)
(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
(set-face-foreground 'org-block-begin-line "#4e4e4e")
(set-face-background 'org-block-begin-line "#3a3a3a")

;; extend block code
(custom-set-faces
 '(org-block ((t (:extend t)))))

;; set block code indentation
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0
      org-startup-truncated nil
      org-src-tab-acts-natively t
      org-startup-indented t)

;; disable image size
(setq org-image-actual-width nil)
#+END_SRC

* Git
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
         ;; open magit status in same buffer
         (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  :config
         (global-set-key (kbd "C-x g") 'magit-status)
  )


;; open file in git
(use-package git-link
  :ensure t
  :config
         (setq git-link-open-in-browser t)
  )

(global-set-key (kbd "C-c l") 'git-link)
#+end_src

* Keybinding
#+BEGIN_SRC emacs-lisp
;; ECS cancels all
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;;
(global-set-key (kbd "C-x k") 'kill-this-buffer)

(defun ls ()
  "Lists the contents of the current directory."
  (interactive)
  (shell-command "open -a iterm ."))

(global-set-key (kbd "C-x t") 'ls);

;; MacOS option key as meta
(setq mac-option-modifier 'meta)

;; find definity
(global-set-key (kbd "M-g j") 'xref-find-definitions)
;; go back
(global-set-key (kbd "M-g b") 'xref-pop-marker-stack)
#+END_SRC

* Search Completion
** Ivy mode
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :bind (("C-s" . swiper-isearch)
	     ("C-a" . swiper-all-thing-at-point)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src

** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
  )

;; Adds M-x recent command sorting for counsel-M-x
(use-package smex
  :ensure t
  :defer 1
  :after counsel)
#+end_src


* Folder management
#+begin_src  emacs-lisp
(use-package projectile
  :ensure t
  :config
     ;; enable
     (projectile-mode +1)

     ;; ignore  node_modules dir - JS
     ;;(setq projectile-globally-ignored-files '( "TAGS" "*/*node_modules"))

     ;;(setq projectile-globally-ignored-directories "eln-cache")

     ;; remap key
     (define-key projectile-mode-map (kbd "C-q p") 'projectile-command-map)
     (setq projectile-use-git-grep t)
  )

;; make sure projectile to work with counsel
(use-package counsel-projectile
  :ensure t
  )

(defun projectile-discover-projects-in-directory (directory)
  "Discover any projects in DIRECTORY and add them to the projectile cache.
This function is not recursive and only adds projects with roots
at the top level of DIRECTORY."
  (interactive
   (list (read-directory-name "Starting directory: ")))
  (let ((subdirs (directory-files directory t)))
    (mapcar
     (lambda (dir)
       (when (and (file-directory-p dir)
                  (not (member (file-name-nondirectory dir) '(".." "."))))
         (let ((default-directory dir)
               (projectile-cached-project-root dir))
           (when (projectile-project-p)
             (projectile-add-known-project (projectile-project-root))))))
     subdirs)))
#+end_src

* UI
** Theme
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (tooltip-mode -1)
  ;;(global-display-line-numbers-mode 1)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (column-number-mode t)
  (global-auto-revert-mode t)
  (toggle-scroll-bar -1)
  (global-visual-line-mode 1)
  (electric-pair-mode 1)
  (setq electric-pair-preserve-balance nil)
  (setq ring-bell-function 'ignore)
  ;; disable tabbing
  (setq-default indent-tabs-mode nil)

  ;; set warning to Error
  (setq warning-minimum-level :emergency)

  (set-frame-font "Monaco 17" nil t)

  ;; use with doom-mode-line
  ;; https://github.com/doomemacs/themes
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (custom-set-faces
   `(font-lock-keyword-face ((t (:foreground ,(doom-color 'green '257)))))
   `(font-lock-variable-name-face ((t (:foreground ,(doom-color 'blue '1000)))))
   )


#+END_SRC

** Mode line
#+begin_src  emacs-lisp
  ;; https://github.com/seagle0128/doom-modeline#install
  ;; use with nerd-icons
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  ;; https://github.com/rainstormstudio/nerd-icons.el#installing-fonts
  (use-package nerd-icons
    :ensure t)
#+end_src

** Manual step
#+begin_src bash
  Run M-x nerd-icons-install-fonts
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode)
    )
#+end_src

* Utilities
** Force emacs to use PATH
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

#+end_src

** Super auto save
#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (super-save-mode +1))
#+end_src

** Trim white space
#+begin_src emacs-lisp
  (use-package ws-butler
    :ensure t
    :config
    (ws-butler-global-mode)
    )
#+end_src

** Backup
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq auto-save-file-name-transforms `((".*" ,"~/.saves" t)))
#+end_src

* Completion
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    :ensure t
    :config
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    :ensure t
    :config
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
  ;; Enable auto completion and configure quitting
  (setq corfu-auto t
        corfu-quit-no-match 'separator) ;; or t
#+END_SRC

* Treesitter
** Manual step
Note: Eval this block of code to install all treesitter grammar language
#+BEGIN_SRC 
  ;; https://www.masteringemacs.org/article/how-to-get-started-tree-sitter

  (setq treesit-language-source-alist
	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
	  (css "https://github.com/tree-sitter/tree-sitter-css")
	  (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	  (go "https://github.com/tree-sitter/tree-sitter-go")
      (gomode "https://github.com/camdencheek/tree-sitter-go-mod")
	  (html "https://github.com/tree-sitter/tree-sitter-html")
	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	  (json "https://github.com/tree-sitter/tree-sitter-json")
	  (make "https://github.com/alemuller/tree-sitter-make")
	  (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	  (python "https://github.com/tree-sitter/tree-sitter-python")
	  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	  (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))

#+END_SRC

** Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-ts-mode
    :ensure t
    :mode "\\.go\\'"
    :hook ((go-ts-mode . eglot-ensure)
           (go-ts-mode . corfu-mode)))
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-ts-mode
  :ensure t
  :mode ("\\.yaml\\'" "\\.yml\\'")
  :hook ((yaml-ts-mode . eglot-ensure)
         (yaml-ts-mode . corfu-mode)))
#+END_SRC

** Javascript
#+begin_src emacs-lisp
(use-package js-ts-mode
  :ensure t
  :mode "\\.js\\'"
  :hook((js-ts-mode . eglot-ensure)
        (js-ts-mode . corfu-mode))
  )
#+end_src

** Typescript
#+begin_src emacs-lisp
(use-package typescript-ts-mode
  :ensure t
  :mode "\\.ts\\'"
  :hook((typescript-ts-mode . eglot-ensure)
        (typescript-ts-mode . corfu-mode))
  )
#+end_src

** Remap major autoloaded mode
#+begin_src emacs-lisp
(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
(add-to-list 'major-mode-remap-alist '(js-mode . js-ts-mode))
#+end_src

* Eglot
#+begin_src emacs-lisp
(use-package eglot
  :ensure t
  :defer t)
#+end_src
