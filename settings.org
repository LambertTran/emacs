* Turn off menu bar
#+BEGIN_SRC emacs-lisp
(setq evil-want-keybinding 'nil)
;; menu is not available in Mac
;; (menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(global-display-line-numbers-mode 1)
(column-number-mode t)
(global-auto-revert-mode t)
(toggle-scroll-bar -1)
(global-visual-line-mode 1)
(electric-pair-mode 1)
(setq electric-pair-preserve-balance nil)
(setq ring-bell-function 'ignore)

;; ECS cancels all
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; 
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC



* Utilities
** Super auto save
#+begin_src emacs-lisp
(use-package super-save
  :ensure t
  :config
  (super-save-mode +1))
#+end_src

** Trim white space
#+begin_src emacs-lisp
(use-package ws-butler
  :ensure t
  ;; enable for all programing modes
  :hook (prog-mode . ws-butler-mode)
  )
#+end_src

** Clipboard
#+begin_src emacs-lisp
(defun pbcopy ()
  (interactive)
  (call-process-region (point) (mark) "pbcopy")
  (setq deactivate-mark t))

(defun pbpaste ()
  (interactive)
  (call-process-region (point) (if mark-active (mark) (point)) "pbpaste" t t))

(defun pbcut ()
  (interactive)
  (pbcopy)
  (delete-region (region-beginning) (region-end)))

(global-set-key (kbd "C-c c") 'pbcopy)
(global-set-key (kbd "C-c v") 'pbpaste)
(global-set-key (kbd "C-c x") 'pbcut)
#+end_src

** Option key as Meta key
#+begin_src emacs-lisp
(setq mac-option-modifier 'meta)
#+end_src

** Backup
#+begin_src emacs-lisp
; Backup
(setq create-lockfiles nil)
(setq backup-directory-alist `(("." . "~/.saves")))
(setq auto-save-file-name-transforms `((".*" ,"~/.saves" t)))
#+end_src

** Dumb Jump
#+begin_src emacs-lisp
(use-package dumb-jump
  :ensure t
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config
         (setq dumb-jump-selector 'helm)
  )
#+end_src

* UI
** Theme
#+BEGIN_SRC emacs-lisp
(set-frame-font "Monaco 17" nil t)

(use-package moe-theme
  :ensure t
  )
 
(setq moe-theme-highlight-buffer-id t)
 
(moe-dark)
(set-face-attribute 'minibuffer-prompt nil :foreground "#80ff00" :background "#080808")
(set-face-attribute 'mode-line-buffer-id nil :background "dark slate gray" :foreground "#ccffff")
 
;; highlight parens
(show-paren-mode t)
(setq show-paren-style 'expression)
#+END_SRC

** Mode line
#+begin_src  emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  )

(setq doom-modeline-bar-width 4)
(setq doom-modeline-window-width-limit fill-column)

(use-package all-the-icons
  :ensure t
  )


(setq evil-normal-state-tag   (propertize "[Normal]" 'face '(:background "red" :foreground "red"))
      evil-emacs-state-tag    (propertize "[Emacs]" 'face '((:background "orange" :foreground "red")))
      evil-insert-state-tag   (propertize "[Insert]" 'face '((:background "red") :foreground "white"))
      evil-motion-state-tag   (propertize "[Motion]" 'face '((:background "blue") :foreground "white"))
      evil-visual-state-tag   (propertize "[Visual]" 'face '((:background "grey80" :foreground "red")))
      evil-operator-state-tag (propertize "[Operator]" 'face '((:background "purple"))))
#+end_src


*** Manual step
#+begin_src bash
Run M-x all-the-icons-install-fonts
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode)
  )
#+end_src

** Smart Parans
#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  )

(use-package smartparens-config
  :ensure smartparens
  :diminish smartparens-mode
  :config
  (progn
    (require 'smartparens-config)
    (smartparens-global-mode 1)
    (show-paren-mode t)))

#+end_src

** Treemac
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  )

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package lsp-treemacs
  :after (treemacs lsp-mode)
  :ensure t
  )
#+end_src


* Search Completion
** Ivy mode
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :bind (("C-s" . swiper-isearch)
	     ("C-a" . swiper-all-thing-at-point)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src

** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
  )

;; Adds M-x recent command sorting for counsel-M-x
(use-package smex
  :ensure t
  :defer 1
  :after counsel)
#+end_src


* Folder management
#+begin_src  emacs-lisp
(use-package projectile
  :ensure t
  :config
     ;; enable
     (projectile-mode +1)

     ;; ignore  node_modules dir - JS
     (setq projectile-globally-ignored-files '( "TAGS" "*/*node_modules"))

     (setq projectile-globally-ignored-directories "eln-cache")

     ;; remap key
     (define-key projectile-mode-map (kbd "C-q p") 'projectile-command-map)
  )

;; make sure projectile to work with counsel
(use-package counsel-projectile
  :ensure t
  )

(defun projectile-discover-projects-in-directory (directory)
  "Discover any projects in DIRECTORY and add them to the projectile cache.
This function is not recursive and only adds projects with roots
at the top level of DIRECTORY."
  (interactive
   (list (read-directory-name "Starting directory: ")))
  (let ((subdirs (directory-files directory t)))
    (mapcar
     (lambda (dir)
       (when (and (file-directory-p dir)
                  (not (member (file-name-nondirectory dir) '(".." "."))))
         (let ((default-directory dir)
               (projectile-cached-project-root dir))
           (when (projectile-project-p)
             (projectile-add-known-project (projectile-project-root))))))
     subdirs)))
#+end_src


* Evil mode
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)

(use-package evil
  :ensure t
  :config
  ;; Make tab work with org-mode
  (evil-mode 1)
  )
#+END_SRC


* Org
** Change bullet style
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+END_SRC

** Column to middle of page
#+BEGIN_SRC emacs-lisp
(defun org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :ensure t
  :hook (org-mode . org-mode-visual-fill))
#+END_SRC

** Utilities
#+BEGIN_SRC emacs-lisp
;; insert src org
(global-set-key (kbd "C-c a") 'org-agenda-list)
(global-set-key (kbd "C-c s") 'org-insert-structure-template)
(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
(set-face-foreground 'org-block-begin-line "#4e4e4e")
(set-face-background 'org-block-begin-line "#3a3a3a")

;; extend block code
(custom-set-faces
 '(org-block ((t (:extend t)))))

;; set block code indentation
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0
      org-startup-truncated nil
      org-src-tab-acts-natively t
      org-startup-indented t)
#+END_SRC

** Org Agenda
#+begin_src emacs-lisp
(setq org-agenda-files
      '("~/org-agenda/todos.org"
	    "~/org-agenda/habits.org"
	    "~/org-agenda/journal.org"))
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src

** Org Capture Template
#+begin_src emacs-lisp
  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/org-agenda/todos.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/org-agenda/journal.org")
           "\n* %<%I:%M %p> - Journal \n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :empty-lines 1)
       ))
#+end_src

** TODO Icons
#+begin_src emacs-lisp
(customize-set-value
    'org-agenda-category-icon-alist
    `(
      ("agenda" "~/.emacs.d/icons/work.svg" nil nil :ascent center :mask heuristic)
      ("habit" "~/.emacs.d/icons/chore.svg" nil nil :ascent center :mask heuristic)
      ("events" "~/.emacs.d/icons/events.svg" nil nil :ascent center :mask heuristic)
      ("inbox" "~/.emacs.d/icons/inbox.svg" nil nil :ascent center :mask heuristic)
      ("walk" "~/.emacs.d/icons/walk.svg" nil nil :ascent center :mask heuristic)
      ("solution" "~/.emacs.d/icons/solution.svg" nil nil :ascent center :mask heuristic)
      ("community" "~/.emacs.d/icons/community.svg" nil nil :ascent center :mask heuristic)
      ("idea" "~/.emacs.d/icons/idea.svg" nil nil :ascent center :mask heuristic)
      ("man" "~/.emacs.d/icons/man.svg" nil nil :ascent center :mask heuristic)
      ("scheduled" "~/.emacs.d/icons/scheduled.svg" nil nil :ascent center :mask heuristic)
      ("class" "~/.emacs.d/icons/class.svg" nil nil :ascent center :mask heuristic)
      ("plant" "~/.emacs.d/icons/plant.svg" nil nil :ascent center :mask heuristic)
      ("check" "~/.emacs.d/icons/check.svg" nil nil :ascent center :mask heuristic)
      ("search" "~/.emacs.d/icons/search.svg" nil nil :ascent center :mask heuristic)
      ("home" "~/.emacs.d/icons/home.svg" nil nil :ascent center :mask heuristic)
      ("book" "~/.emacs.d/icons/book.svg" nil nil :ascent center :mask heuristic)
      ("cook" "~/.emacs.d/icons/cook.svg" nil nil :ascent center :mask heuristic)
      ("buy" "~/.emacs.d/icons/buy.svg" nil nil :ascent center :mask heuristic)
      ("shower" "~/.emacs.d/icons/shower.svg" nil nil :ascent center :mask heuristic)
      ))
#+end_src

** Source block
#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("go" . "src go :results output"))
#+end_src

** Execute code
#+begin_src emacs-lisp
;;(require 'ob-go)
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((go . t)))
;; 
;; babel will not ask for perm to execute code
;; (setq org-confirm-babel-evaluate nil)
#+end_src


* Git
** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
         ;; open magit status in same buffer
         (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  :config
         (global-set-key (kbd "C-x g") 'magit-status)
  )


;; open file in git
(use-package git-link
  :ensure t
  :config
         (setq git-link-open-in-browser t)
  )

(global-set-key (kbd "C-c l") 'git-link)
#+end_src

** Evil Integration
#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :init
  (evil-collection-init)
  )
#+end_src


* Programming
** Language server Protocol
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :defer t
  :hook
  (sh-mode . lsp)
  (html-mode . lsp)
  )

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :custom
    ;; this feature is disabled by default
    (lsp-ui-doc-show-with-cursor t) 
    (lsp-ui-doc-delay 0.0)
  )

#+end_src

** Auto Completion
#+begin_comment
M-x company-diag: show company backend
#+end_comment

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
	      ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
	      ("<tab>" . company-indent-or-complete-common))
  :custom
    ;; start autocompletion only after typing
    (company-begin-commands '(self-insert-command)) 
	;; decrease delay before autocompletion popup shows
    (company-idle-delay 0.0)                         
    (company-minimum-prefix-length 1)
    ;; remove annoying blinking
    (company-echo-delay 0)                          
  )
#+end_src

** Golang
- source: https://github.com/mdempsky/gocode
- need to install gopls

#+begin_src bash
go get -u github.com/mdempsky/gocode
gocode close
export GOPATH=$(go env GOPATH)
# /Users/alirom/go

export PATH=$(go env GOPATH)/bin:$PATH
# /Users/alirom/go/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin/git:/Users/alirom/go/bin:/usr/local/go/bin:/Library/Apple/usr/bin
#+end_src


#+begin_src emacs-lisp
(use-package go-mode
  :ensure t
  :defer t
  :config
  ;; (require 'dap-go)
  ;; (require 'dap-hydra)
  ;; (dap-go-setup)
  ;; (setq dap-print-io t)
  (setq lsp-go-analyses
        '((fieldalignment . t)
          (unusedwrite . t)
          (unusedparams . t)
          (nilness . t)))
  )

(add-hook 'go-mode-hook #'lsp-deferred)


(use-package company-go
   :ensure t
   :defer t
   :hook (go-mode . company-mode)
  )


;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
;  (add-hook 'before-save-hook #'lsp-organize-imports t t)
  )
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)



;; Set tab width
(add-hook 'go-mode-hook (lambda()
        (setq tab-width 4)
))
#+end_src

** Python
- http://tkf.github.io/emacs-jedi/latest/

#+begin_src emacs-lisp
(use-package python
  :ensure t
  :config
  ;; Remove guess indent python message
  (setq python-indent-guess-indent-offset-verbose nil)
  ;; Use IPython when available or fall back to regular Python
  (cond
   ((executable-find "ipython")
    (progn
      (setq python-shell-buffer-name "IPython")
      (setq python-shell-interpreter "ipython")
      (setq python-shell-interpreter-args "-i --simple-prompt")))
   ((executable-find "python3")
    (setq python-shell-interpreter "python3"))
   ((executable-find "python2")
    (setq python-shell-interpreter "python2"))
   (t
    (setq python-shell-interpreter "python"))))

(use-package lsp-pyright
  :ensure t
  :defer t
  :config
  (setq lsp-clients-python-library-directories '("/usr/" "~/miniconda3/pkgs"))
  (setq lsp-pyright-disable-language-service nil
        lsp-pyright-disable-organize-imports nil
        lsp-pyright-auto-import-completions t
        lsp-pyright-use-library-code-for-types t)
  :hook ((python-mode . (lambda ()
                          (require 'lsp-pyright) (lsp-deferred)))))


(add-hook 'python-mode #'lsp-deferred)
#+end_src

** Compiling
#+begin_src emacs-lisp
(global-set-key (kbd "C-c p") 'project-compile)
(global-set-key (kbd "C-c k") 'kill-compilation)
(add-hook 'compilation-filter-hook #'ansi-color-compilation-filter)
(setq compilation-scroll-output t)
#+end_src

** Terraform
#+begin_src 
- clone
git clone https://github.com/juliosueiras/terraform-lsp.git
- and build
#+end_src

#+begin_src emacs-lisp
(use-package terraform-mode
  :ensure t
  )

(add-hook 'terraform-mode-hook #'lsp)

(use-package company-terraform
  :ensure t
  )

(company-terraform-init)


(with-eval-after-load 'lsp-mode
(add-to-list 'lsp-language-id-configuration '(terraform-mode . "terraform"))
(lsp-register-client
 ;; terraform-lsp is installed via go 
 (make-lsp-client :new-connection (lsp-stdio-connection '("/Users/alirom/go/bin/terraform-lsp" "-enable-log-file"))
                  :major-modes '(terraform-mode)
                  :server-id 'terraform-ls))
  )

#+end_src


** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode "\\.ya?ml\\'")

;; need to manually install yaml lsp
;; M-x lsp-install-server RET yamlls RET.
(add-hook 'yaml-mode-hook #'lsp-deferred)
#+end_src

** Dockerfile
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :config
  :mode "Dockerfile\\'"
  )

;; need to manually install dockerfile lsp
;; M-x lsp-install-server RET dockerfile-ls
;; (add-hook 'dockerfile-mode-hook #'lsp-deferred)
#+end_src

